# Insert a blank line between shell prompts
add_newline = true

# Increase the default command timeout to 2 seconds
command_timeout = 2000

# Define the order and format of the information in our prompt
format = """\
$directory\
${custom.directory_separator_not_git}\
${custom.directory_separator_git}\
$symbol($git_branch[](fg:#FCF392))\
$symbol( $git_commit$git_status$git_metrics$git_state)$fill$cmd_duration$nodejs$all\
${custom.git_config_email}
$character"""

# Place this line directly under the `command_timeout` entry at the top of the file
palette = "catppuccin_macchiato"

# Then, this `palettes` entry can go at the bottom of the TOML file
# You may add additional palettes as desired.
[palettes.catppuccin_macchiato]
rosewater = "#f4dbd6"
flamingo = "#f0c6c6"
pink = "#f5bde6"
mauve = "#c6a0f6"
red = "#ed8796"
maroon = "#ee99a0"
peach = "#f5a97f"
yellow = "#eed49f"
green = "#a6da95"
teal = "#8bd5ca"
sky = "#91d7e3"
sapphire = "#7dc4e4"
blue = "#8aadf4"
lavender = "#b7bdf8"
text = "#cad3f5"
subtext1 = "#b8c0e0"
subtext0 = "#a5adcb"
overlay2 = "#939ab7"
overlay1 = "#8087a2"
overlay0 = "#6e738d"
surface2 = "#5b6078"
surface1 = "#494d64"
surface0 = "#363a4f"
base = "#24273a"
mantle = "#1e2030"
crust = "#181926"

[os.symbols]
Windows = "󰍲"
Ubuntu = "󰕈"
SUSE = ""
Raspbian = "󰐿"
Mint = "󰣭"
Macos = "󰀵"
Manjaro = ""
Linux = "󰌽"
Gentoo = "󰣨"
Fedora = "󰣛"
Alpine = ""
Amazon = ""
Android = ""
Arch = "󰣇"
Artix = "󰣇"
EndeavourOS = ""
CentOS = ""
Debian = "󰣚"
Redhat = "󱄛"
RedHatEnterprise = "󱄛"
Pop = ""

[directory.substitutions]
"Documents" = "󰈙"
"Downloads" = ""
"Music" = "󰝚"
"Pictures" = ""
"Developer" = "󰲋"


# Fill character (empty space) between the left and right prompt
[fill]
symbol = " "

# Disable the line break between the first and second prompt lines
[line_break]
disabled = true

# Customize the format of the working directory
[directory]
truncate_to_repo = true
format = "[  $path ]($style)"
style = "fg:text bg:#3B76F0"

[git_branch]
symbol = " "
format = "[ $symbol$branch(:$remote_branch) ]($style)"
style = "fg:#1C3A5E bg:#FCF392"

[git_metrics]
disabled = false

[nodejs]
format = "via [$symbol($version )]($style)"
style = "yellow"

[buf]
format = '(with [$symbol($version )]($style))'
style = "yellow"

[bun]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[c]
format = '(via [$symbol($version(-$name) )]($style))'
style = "yellow"

[cpp]
format = '(via [$symbol($version(-$name) )]($style))'
style = "yellow"

[cmake]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[cobol]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[crystal]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[daml]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[dart]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[deno]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[dotnet]
format = '(via [$symbol($version )(🎯 $tfm )]($style))'
style = "yellow"

[elixir]
format = '(via [$symbol($version \(OTP $otp_version\) )]($style))'
style = "yellow"

[elm]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[erlang]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[fennel]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[gleam]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[golang]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[haskell]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[helm]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[java]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[julia]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[kotlin]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[lua]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[nim]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[ocaml]
format = '(via [$symbol($version )(\($switch_indicator$switch_name\) )]($style))'
style = "yellow"

[opa]
format = '(via [$symbol($version )]($style))'
style = "yellow"


[perl]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[php]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[purescript]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[python]
format = '(via [${symbol}${pyenv_prefix}(${version} )(\($virtualenv\) )]($style))'
style = "yellow"

[quarto]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[raku]
format = '(via [$symbol($version-$vm_version )]($style))'
style = "yellow"

[red]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[rlang]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[ruby]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[rust]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[scala]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[swift]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[typst]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[vagrant]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[vlang]
format = '(via [$symbol($version )]($style))'
style = "yellow"

[zig]
format = '(via [$symbol($version )]($style))'
style = "yellow"


[package]
disabled = true                       # Enable to output the current working directory's package version
format = "[$symbol$version]($style) "
display_private = true

# Output the command duration if over 2 seconds
[cmd_duration]
min_time = 2_000
format = "[  $duration ]($style)"
style = "white"

# Customize the battery indicator
[battery]
format = "[$symbol $percentage]($style) "
empty_symbol = "🪫"
charging_symbol = "🔋"
full_symbol = '🔋'

[[battery.display]]
threshold = 10
style = 'red'

# Output the current git config email address
[custom.git_config_email]
description = "Output the current git user's configured email address."
command = "git config user.email"
format = "\n[$symbol(  $output)]($style)"
# Only when inside git repository
when = "git rev-parse --is-inside-work-tree >/dev/null 2>&1"
style = "text"

# Output a styled separator right after the directory when inside a git repository.
[custom.directory_separator_git]
description = "Output a styled separator right after the directory when inside a git repository."
command = ""
format = "[](fg:#3B76F0 bg:#FCF392)"
# Only when inside git repository
when = "git rev-parse --is-inside-work-tree >/dev/null 2>&1"

# Output a styled separator right after the directory when NOT inside a git repository.
[custom.directory_separator_not_git]
description = "Output a styled separator right after the directory when NOT inside a git repository."
command = ""
format = "[](fg:#3B76F0)"
# Only when NOT inside a git repository
when = "! git rev-parse --is-inside-work-tree > /dev/null 2>&1"
